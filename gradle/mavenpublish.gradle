apply plugin: 'signing'

afterEvaluate {
    def isRelease = !project.VERSION_NAME.endsWith('SNAPSHOT')

    publishing {
        publications {
            release(MavenPublication) {
                groupId = project.GROUP
                artifactId = project.POM_ARTIFACT_ID
                version = project.VERSION_NAME

                from(components['release'])

                pom {
                    name.set('VK SDK Android')
                    description.set(project.POM_DESCRIPTION)
                    url.set('https://github.com/vksdk/vk-sdk-android')

                    licenses {
                        license {
                            name.set('MIT License')
                            url.set('https://raw.githubusercontent.com/vksdk/vk-sdk-android/master/LICENSE')
                            distribution.set('repo')
                        }
                    }
                    developers {
                        developer {
                            id.set('PeterSamokhin')
                            name.set('Peter Samokhin')
                            url.set('https://github.com/petersamokhin')
                            email.set('contact+vksdk@petersamokhin.com')
                        }
                    }

                    scm {
                        url.set('https://github.com/vksdk/vk-sdk-android')
                        connection.set('scm:git:git://github.com/vksdk/vk-sdk-android.git')
                        developerConnection.set('scm:git:ssh://git@github.com/vksdk/vk-sdk-android.git')
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'mavenCentral'

                def releasesRepoUrl = project.findProperty('REPOSITORY_URL_MAVEN_STAGING_DEFAULT')
                def snapshotsRepoUrl = project.findProperty('REPOSITORY_URL_MAVEN_SNAPSHOT_DEFAULT')

                url = isRelease ? releasesRepoUrl : snapshotsRepoUrl

                if (isRelease) {
                    credentials {
                        username = project.findProperty('SONATYPE_NEXUS_USERNAME')
                        password = project.findProperty('SONATYPE_NEXUS_PASSWORD')
                    }
                }
            }
        }
    }

    signing {
        required { isRelease }

        def signingKey = project.findProperty('signingKey')
        def signingPassword = project.findProperty('signingPassword')
        useInMemoryPgpKeys(signingKey, signingPassword)

        sign publishing.publications.release
        sign configurations.archives
    }
}
